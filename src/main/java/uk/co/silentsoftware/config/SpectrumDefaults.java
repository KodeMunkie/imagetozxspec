/* Image to ZX Spec
 * Copyright (C) 2023 Silent Software (Benjamin Brown)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.silentsoftware.config;

import java.awt.Color;
import java.util.*;

import uk.co.silentsoftware.core.converters.image.processors.GigaScreenAttribute;

/**
 * ZX Spectrum constants such as palette, its platform palette indexes
 * the real 32bit colour representations, screen resolution etc.
 */
public class SpectrumDefaults {

	private static final int UNIQUE_COLOURS_THRESHOLD = 3;

	/**
	 * The size of Spectrum the colour "blocks" (8x8 pixels default)
	 */
	public static final int ATTRIBUTE_BLOCK_SIZE = 8;
	
	/**
	 * The spectrum screen width in pixels
	 */
	public static final int SCREEN_WIDTH = 256;
	
	/**
	 * The spectrum screen height in pixels
	 */
	public static final int SCREEN_HEIGHT = 192;
	
	/**
	 * 1/3 of the spectrum screen height in pixels
	 */
	public static final int SCREEN_HEIGHT_THIRD = SCREEN_HEIGHT/3;
	
	/**
	 * The number of character colour rows
	 */
	public static final int ROWS = SCREEN_HEIGHT/ATTRIBUTE_BLOCK_SIZE;
	
	/**
	 * The number of character colour columns
	 */
	public static final int COLUMNS = SCREEN_WIDTH/ATTRIBUTE_BLOCK_SIZE;

	/**
	 * Colours that are grouped on a single screen to reduce inter-attribute flicker
	 */
	public static final List<Integer> GIGASCREEN_GROUPED_COLOURS = new ArrayList<>();
	static {
		GIGASCREEN_GROUPED_COLOURS.add(0xFF000000); // black
		GIGASCREEN_GROUPED_COLOURS.add(0xFF00CDCD); // turquiose h
		GIGASCREEN_GROUPED_COLOURS.add(0xFF00FFFF); // turquiose
		GIGASCREEN_GROUPED_COLOURS.add(0xFFCD0000); // red h
		GIGASCREEN_GROUPED_COLOURS.add(0xFFFF0000); // red
		GIGASCREEN_GROUPED_COLOURS.add(0xFFCD00CD); // magenta h
		GIGASCREEN_GROUPED_COLOURS.add(0xFFFF00FF); // magenta
	}

	/**
	 * Spectrum's full bright colour set
	 */
	public static final int[] SPECTRUM_COLOURS_BRIGHT;

	static {
		SPECTRUM_COLOURS_BRIGHT = new int[] {
			0xFF000000,
			0xFF0000FF, 	
			0xFFFF0000, 	
			0xFFFF00FF,
			0xFF00FF00, 	
			0xFF00FFFF,
			0xFFFFFF00, 
			0xFFFFFFFF
		};
	}
	/**
	 * Spectrum's half bright colour set
	 */
	public static final int[] SPECTRUM_COLOURS_HALF_BRIGHT;
	static {
		SPECTRUM_COLOURS_HALF_BRIGHT = new int[] {
		0xFF000000,
		0xFF0000CD,	
		0xFFCD0000,
		0xFFCD00CD,
		0xFF00CD00, 	
		0xFF00CDCD,
		0xFFCDCD00,
		0xFFCDCDCD
		};
	}
	
	/**
	 * Spectrum's primary colours minus magenta and teal (makes for a less gawdy image)
	 */
	public static final int[] SPECTRUM_COLOURS_REDUCED_HALF_BRIGHT;
	static {
		SPECTRUM_COLOURS_REDUCED_HALF_BRIGHT = new int[] {
		0xFF000000,
		0xFF0000CD,	
		0xFFCD0000,
		0xFF00CD00, 	
		0xFFCDCD00,
		0xFFCDCDCD
		};
	}
	
	/**
	 * All Spectrum colours
	 */
	public static final int[] SPECTRUM_COLOURS_ALL;
	static {
		SPECTRUM_COLOURS_ALL= new int[] {
		0xFF000000,
		0xFF0000CD,
		0xFF0000FF,
		0xFFCD0000,
		0xFFFF0000,	
		0xFFCD00CD,
		0xFFFF00FF,
		0xFF00CD00, 
		0xFF00FF00,
		0xFF00CDCD,
		0xFF00FFFF,
		0xFFCDCD00,
		0xFFFFFF00, 
		0xFFCDCDCD,
		0xFFFFFFFF
		};
	}
		
	/**
	 * The GigaScreen persistence of vision colours generated by flashing two screens.
	 */
	public static final int[] GIGASCREEN_COLOURS_ALL;
	static {
		GIGASCREEN_COLOURS_ALL = new int[] {
				0xff000000,
				0xff006600,
				0xff000066,
				0xff660000,
				0xff7f0000,
				0xff00007f,
				0xff007f00,
				0xff006666,
				0xff666600,
				0xff660066,
				0xff0000cd,
				0xff00cd00,
				0xffcd0000,
				0xff7f0066,
				0xff00667f,
				0xff007f66,
				0xff7f6600,
				0xff66007f,
				0xff667f00,
				0xff0000e6,
				0xff00e600,
				0xffe60000,
				0xff7f007f,
				0xff7f7f00,
				0xff007f7f,
				0xff0000ff,
				0xffff0000,
				0xff00ff00,
				0xff666666,
				0xff6600cd,
				0xffcd6600,
				0xffcd0066,
				0xff0066cd,
				0xff66cd00,
				0xff00cd66,
				0xff66667f,
				0xff667f66,
				0xff7f6666,
				0xffe60066,
				0xff6600e6,
				0xff00e666,
				0xff66e600,
				0xff0066e6,
				0xffe66600,
				0xff7f7f66,
				0xff667f7f,
				0xff7f667f,
				0xff007fe6,
				0xffe6007f,
				0xff00e67f,
				0xffe67f00,
				0xff7f00e6,
				0xff7fe600,
				0xff7f7f7f,
				0xff007fff,
				0xff7fff00,
				0xff7f00ff,
				0xff00ff7f,
				0xffff007f,
				0xffff7f00,
				0xffcd6666,
				0xff6666cd,
				0xff66cd66,
				0xffcd00cd,
				0xff00cdcd,
				0xffcdcd00,
				0xff66e666,
				0xffe66666,
				0xff6666e6,
				0xffe67f66,
				0xff667fe6,
				0xff66e67f,
				0xff7f66e6,
				0xff7fe666,
				0xffe6667f,
				0xffe600e6,
				0xff00e6e6,
				0xffe6e600,
				0xffe67f7f,
				0xff7f7fe6,
				0xff7fe67f,
				0xff7fff7f,
				0xff7f7fff,
				0xffff7f7f,
				0xff00ffff,
				0xffff00ff,
				0xffffff00,
				0xff66cdcd,
				0xffcd66cd,
				0xffcdcd66,
				0xffe666e6,
				0xffe6e666,
				0xff66e6e6,
				0xff7fe6e6,
				0xffe67fe6,
				0xffe6e67f,
				0xffcdcdcd,
				0xffff7fff,
				0xff7fffff,
				0xffffff7f,
				0xffe6e6e6,
				0xffffffff
		};
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating half bright screen 1 colours x half bright screen 2 colours 
	 */
	public static final GigaScreenAttribute[] GIGASCREEN_HALF_BRIGHT_ATTRIBUTES;
	static {
		GIGASCREEN_HALF_BRIGHT_ATTRIBUTES = SpectrumDefaults.generateGigascreenAttributes(SPECTRUM_COLOURS_HALF_BRIGHT, SPECTRUM_COLOURS_HALF_BRIGHT);
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating half bright screen 1 colours x full bright screen 2 colours 
	 */
	public static final GigaScreenAttribute[] GIGASCREEN_MIXED_ATTRIBUTES;
	static {
		GIGASCREEN_MIXED_ATTRIBUTES = SpectrumDefaults.generateGigascreenAttributes(SPECTRUM_COLOURS_HALF_BRIGHT, SPECTRUM_COLOURS_BRIGHT);
	}
	
	/**
	 * The GigaScreen combinations of 4 base Spectrum colours generated by 
	 * calculating full bright screen 1 colours x full bright screen 2 colours 
	 */
	public static final GigaScreenAttribute[] GIGASCREEN_BRIGHT_ATTRIBUTES;
	static {	
		GIGASCREEN_BRIGHT_ATTRIBUTES = SpectrumDefaults.generateGigascreenAttributes(SPECTRUM_COLOURS_BRIGHT, SPECTRUM_COLOURS_BRIGHT);
	}
	
	/**
	 * Mappings from RGB to ZX Spectrum palette
	 */
	public static final Map<Integer, Integer> SPECTRUM_ARGB = new HashMap<>(15);
	static {
		SPECTRUM_ARGB.put(0xFF000000, 0);
		SPECTRUM_ARGB.put(0xFF0000CD, 1); SPECTRUM_ARGB.put(0xFF0000FF, 8);
		SPECTRUM_ARGB.put(0xFFCD0000, 2); SPECTRUM_ARGB.put(0xFFFF0000, 9);
		SPECTRUM_ARGB.put(0xFFCD00CD, 3); SPECTRUM_ARGB.put(0xFFFF00FF, 10);
		SPECTRUM_ARGB.put(0xFF00CD00, 4); SPECTRUM_ARGB.put(0xFF00FF00, 11);
		SPECTRUM_ARGB.put(0xFF00CDCD, 5); SPECTRUM_ARGB.put(0xFF00FFFF, 12);
		SPECTRUM_ARGB.put(0xFFCDCD00, 6); SPECTRUM_ARGB.put(0xFFFFFF00, 13);
		SPECTRUM_ARGB.put(0xFFCDCDCD, 7); SPECTRUM_ARGB.put(0xFFFFFFFF, 14);
	}
	
	/**
	 * Mappings from RGB to Color (caching common colours for use in UI only)
	 */
	public static final Map<Integer, Color> SPECTRUM_COLORS = new HashMap<>(15);
	static {
		SPECTRUM_COLORS.put(0xFF000000, new Color(0xFF000000));
		SPECTRUM_COLORS.put(0xFF0000CD, new Color(0xFF0000CD)); SPECTRUM_COLORS.put(0xFF0000FF, new Color(0xFF0000FF));
		SPECTRUM_COLORS.put(0xFFCD0000, new Color(0xFFCD0000)); SPECTRUM_COLORS.put(0xFFFF0000, new Color(0xFFFF0000));
		SPECTRUM_COLORS.put(0xFFCD00CD, new Color(0xFFCD00CD)); SPECTRUM_COLORS.put(0xFFFF00FF, new Color(0xFFFF00FF));
		SPECTRUM_COLORS.put(0xFF00CD00, new Color(0xFF00CD00)); SPECTRUM_COLORS.put(0xFF00FF00, new Color(0xFF00FF00));
		SPECTRUM_COLORS.put(0xFF00CDCD, new Color(0xFF00CDCD)); SPECTRUM_COLORS.put(0xFF00FFFF, new Color(0xFF00FFFF));
		SPECTRUM_COLORS.put(0xFFCDCD00, new Color(0xFFCDCD00)); SPECTRUM_COLORS.put(0xFFFFFF00, new Color(0xFFFFFF00));
		SPECTRUM_COLORS.put(0xFFCDCDCD, new Color(0xFFCDCDCD)); SPECTRUM_COLORS.put(0xFFFFFFFF, new Color(0xFFFFFFFF));
	}
	
	/**
	 * Utility method to generate gigascreen 4 colour combinations from two palettes (bright and half bright)
	 * 
	 * @param palette1 the palette from screen number 1
	 * @param palette2 the palette from screen number 2
	 * @return a gigascreen attribute object representing the combination of both palettes and it's real 32 bit palette colour
	 */
	public static GigaScreenAttribute[] generateGigascreenAttributes(int[] palette1, int[] palette2) {
		Set<GigaScreenAttribute> combos = new HashSet<>();
		for (int inkScreen1 : palette1) {
			for (int paperScreen1 : palette1) {	
				for (int inkScreen2 : palette2) {
					for (int paperScreen2 : palette2) {	
						GigaScreenAttribute gc = new GigaScreenAttribute(inkScreen1, paperScreen1, inkScreen2, paperScreen2);
						
						// Only use those attributes that have 3+ colours otherwise we don't get
						// maximum benefit from this screenmode
						// Nb. used to be 4 colour threshold however colour quantisation/distance/attribute calcuations
						// seem to benefit where very same colours appear multiple times within 8x8 pixels (this is
						// subjective however I think it's important enough to adjust).
						if (gc.getUniqueColourCount() >= UNIQUE_COLOURS_THRESHOLD) {
							combos.add(gc);
						}
					}
				}
			}
		}
		return combos.toArray(new GigaScreenAttribute[]{});
	}
}